using System;
using System.IO;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using cAlgo.API;
using cAlgo.API.Indicators;
using cAlgo.API.Internals;
using cAlgo.Indicators;

namespace cAlgo.Robots
{
    [Robot(TimeZone = TimeZones.UTC, AccessRights = AccessRights.FullAccess)]
    public class PP_TF_UAT : Robot
    {
        [Parameter(DefaultValue = 0.0)]
        public double Parameter { get; set; }

        //[Parameter(DefaultValue = "USDJPY,AUDUSD,EURUSD,GBPUSD,NZDUSD,USDCAD,USDCHF,AUDNZD,AUDCAD,EURCAD,EURAUD,EURCHF,GBPAUD,EURGBP,GBPNZD,AUDJPY,GBPJPY,CADJPY,CHFJPY,EURJPY,EURNZD")]
        //public string CCYPairs { get; set; }
        public string CCYPairs = "EURUSD,GBPUSD,USDJPY,AUDUSD,NZDUSD,USDCAD,USDCHF,NZDJPY,NZDCAD,GBPNZD,GBPAUD,EURNZD,EURJPY,EURGBP,CADCHF,AUDNZD,AUDJPY,AUDCAD";
        //public string CCYPairs = "EURUSD,GBPUSD,USDJPY";
        public int TradeLookBack = 5;

        public double BadVolumeSize = 100000;

        public double Risk_Max = 0.5;
        public double mATR = 2;

        string InputDir = "C:\\Users\\Hp\\AppData\\Roaming\\MetaQuotes\\Terminal\\2010C2441A263399B34F537D91A53AC9\\MQL4\\Files";
        string LogFile = "C:\\Users\\Hp\\Documents\\Trading\\Logs\\" + "PP_Log2.txt";

        public string[] Assets;
        public TimeFrame[] TF;
        public Bars[,] MktData;
        public string[,] Label;
        public AverageTrueRange[,] _atr;
        public PPTrade[,] NewTrades;
        public PPTrade[,] PrevTrades;

        public int total_assets, total_tf;
        //string InputDir = "C:\\temp\\1\\";

        private string NewData;
        private bool NewStart;

        protected override void OnStart()
        {
            NewStart = true;

            //Positions.Closed += OnPositionsClosed;
            Positions.Opened += OnPositionsOpened;
            //Positions.Modified += OnPositionModified;

            string[] temp = CCYPairs.Split(',');
            Print(temp);
            int CCYPair_Count = CCYPairs.Split(',').Length;
            Print(CCYPair_Count);
            Assets = new string[CCYPair_Count];
            for (int i = 0; i < CCYPair_Count; i++)
                Assets[i] = temp[i];


            TF = new TimeFrame[7];

                        /*
            TF[0] = TimeFrame.Minute5;
            TF[1] = TimeFrame.Minute15;
            TF[2] = TimeFrame.Minute30;
            TF[3] = TimeFrame.Hour;
            TF[4] = TimeFrame.Hour4;
            TF[5] = TimeFrame.Daily;
            TF[6] = TimeFrame.Monthly;*/

TF[0] = TimeFrame.Minute;
            TF[1] = TimeFrame.Minute5;
            TF[2] = TimeFrame.Minute15;
            TF[3] = TimeFrame.Minute30;
            TF[4] = TimeFrame.Hour;
            TF[5] = TimeFrame.Hour4;
            TF[6] = TimeFrame.Daily;

            total_assets = Assets.GetUpperBound(0);
            total_tf = TF.GetUpperBound(0);
            MktData = new Bars[total_assets, total_tf];
            _atr = new AverageTrueRange[total_assets, total_tf];
            Label = new string[total_assets, total_tf];
            NewTrades = new PPTrade[total_assets, total_tf];
            PrevTrades = new PPTrade[total_assets, total_tf];
            Print("TF: " + total_tf);
            Print("Assets: " + total_assets);
            for (int j = Assets.GetLowerBound(0); j < Assets.GetUpperBound(0); j++)
                for (int k = TF.GetLowerBound(0); k < TF.GetUpperBound(0); k++)
                {
                    Label[j, k] = string.Format("{0}_{1}_{2}", "PP", Assets[j], MapTF(TF[k]));
                    MktData[j, k] = MarketData.GetBars(TF[k], Assets[j]);
                    _atr[j, k] = Indicators.AverageTrueRange(MktData[j, k], 20, MovingAverageType.Simple);
                    Logger(Label[j, k]);
                }
        }

        private void OnPositionsOpened(PositionOpenedEventArgs obj)
        {
            Position pos = obj.Position;
            string Body = "";
            if (pos.Label.Substring(0, 2) == "PP")
            {
                string Subject = "New Trade: " + obj.Position.Label;
                string[] sComment = pos.Comment.Split('_');
                Body = string.Format("\nComment: {0}\nEntry: {1}\nStopLoss: {2}\nVolume: {3}\nWinRate: {4}\nTrailingStop: {5}", pos.Comment, pos.EntryPrice, pos.StopLoss, pos.Quantity, double.Parse(sComment.Last()) * 100, pos.HasTrailingStop);
                Notifications.SendEmail("punit.trade.ideas@gmail.com", "punit.trade.ideas@gmail.com", Subject, Body);
            }
            Logger("Email sent with content:" + Body);
        }

        void Logger(string Text)
        {
            string Filename = LogFile;
            FileStream stream = null;
            stream = new FileStream(Filename, FileMode.Append);
            using (StreamWriter sw = new StreamWriter(stream))
            {
                string FinalText = DateTime.Now + " = " + Text;
                sw.WriteLine(FinalText);
            }
            Print(Text);
        }
        protected override void OnBar()
        {
            Logger("New Bar");
            int cFilesFound = 0;
            for (int j = Assets.GetLowerBound(0); j < Assets.GetUpperBound(0); j++)
            {
                int cTFFound = 0;
                for (int k = TF.GetLowerBound(0); k < TF.GetUpperBound(0); k++)
                {
                    GetSymbolFiles(Assets[j], TF[k], j, k);
                    cFilesFound++;
                    if (!NewStart)
                    {
                        if (NewTrades[j, k] != null)
                            if (NewTrades[j, k].AllData != PrevTrades[j, k].AllData)
                                Logger(string.Format("y[{0},{1}] New Data:{2}\tPrev Data:{3}", j, k, NewTrades[j, k].AllData, PrevTrades[j, k].AllData));
                    }
                    else
                    {
                        //if (NewTrades[j, k] != null)
                        //Logger(string.Format("z[{0},{1}] New Data: {2}", j, k, NewTrades[j, k].AllData));
                    }
                    cTFFound++;
                }
                Logger("Found " + cTFFound + " files for " + Assets[j]);
            }

            Logger("Symbols Refreshed, found " + cFilesFound + " files");

            Print(!NewStart);
            if (!NewStart)
            {
                CheckRisks();
                Logger("Checked Open Risk");

                CreateTrades();
                Logger("New Trades Created");
            }


            for (int j = Assets.GetLowerBound(0); j < Assets.GetUpperBound(0); j++)
                for (int k = TF.GetLowerBound(0); k < TF.GetUpperBound(0); k++)
                {
                    if (NewTrades[j, k] != null)
                        PrevTrades[j, k] = new PPTrade(NewTrades[j, k].OriginalData);
                }

            NewStart = false;
        }

        void GetSymbolFiles(string FXPair, TimeFrame TF, int asset_n, int tf_n)
        {
            string FilePattern = string.Format("{0}{1}{2}{3}{4}", "*", FXPair, "_", MapTF(TF), "*");
            foreach (string file in Directory.GetFiles(InputDir, FilePattern))
            {
                using (var reader = new StreamReader(file))
                {
                    List<string> item = new List<string>();
                    while (!reader.EndOfStream)
                    {
                        var line = reader.ReadLine();
                        if (line.Length > 3)
                        {
                            var values = line.Split(',');
                            item.Add(values[2]);
                        }
                    }
                    string removeitems = "20,19,17,16,15,13,12,11,10,7,6,5,2";
                    foreach (var num in removeitems.Split(','))
                        item.RemoveAt(int.Parse(num));

                    NewData = string.Format("{0},{1},{2}", FXPair, MapTF(TF), string.Join(",", item));
                    string newNewData = "[" + ((double)asset_n + (double)tf_n / 10) + "] " + NewData;
                    Logger(newNewData);
                    NewTrades[asset_n, tf_n] = new PPTrade(NewData.Split(','));
                }
            }
        }


        void CreateTrades()
        {
            for (int j = Assets.GetLowerBound(0); j < Assets.GetUpperBound(0); j++)
            {
                for (int k = TF.GetLowerBound(0) + 1; k < TF.GetUpperBound(0) - 1; k++)
                {
                    double UID = (double)j + (double)k / 10;
                    if (NewTrades[j, k] != null && PrevTrades[j, k] != null)
                    {
                        bool Entry = NewTrades[j, k].Entry == PrevTrades[j, k].Entry;
                        bool Direction = NewTrades[j, k].TradeDir == PrevTrades[j, k].TradeDir;
                        Print("{7} {6}\t{0} {1} {2}={3} {4}={5}", Entry, Direction, NewTrades[j, k].Entry, PrevTrades[j, k].Entry, NewTrades[j, k].TradeDir, PrevTrades[j, k].TradeDir, NewTrades[j, k].AssetID, UID);
                        if (!Entry && !Direction)
                        {
                            double Close = MarketData.GetBars(TF[k], Assets[j]).ClosePrices.Last(0);
                            double atr = _atr[j, k].Result.LastValue / Symbol.PipSize;
                            Print("Trade Direction: {0}", NewTrades[j, k].TradeDir);
                            double StopLoss = Math.Round(Math.Abs(NewTrades[j, k].Entry - NewTrades[j, k].StopLoss) / Symbol.PipSize, 1);
                            if (NewTrades[j, k].TradeDir == TradeType.Buy)
                            {
                                if (Close > NewTrades[j, k].Entry)
                                {
                                    double OrderVolume = GetOrderVolume(StopLoss, Risk_Max, 1);
                                    if (LastWinRate(Assets[j], TF[k], NewTrades[j, k].TradeDir, TradeLookBack) < 0.6)
                                        OrderVolume = 1000;

                                    string Comment = string.Format("{0}_{1}_{2}_{3}_{4}", 1, NewTrades[j, k - 1].Desc, NewTrades[j, k].Desc, NewTrades[j, k + 1].Desc, LastWinRate(Assets[j], TF[k], NewTrades[j, k].TradeDir, TradeLookBack));
                                    ExecuteMarketOrder(NewTrades[j, k].TradeDir, Assets[j], OrderVolume, Label[j, k], StopLoss, null, Comment);
                                    Logger(string.Format("Mkt Order {0}", Label[j, k]));
                                }
                                else
                                {
                                    for (int i = 1; i < 4; i++)
                                    {
                                        double OrderVolume = GetOrderVolume(StopLoss, Risk_Max, i);
                                        if (LastWinRate(Assets[j], TF[k], NewTrades[j, k].TradeDir, TradeLookBack) < 0.6)
                                            OrderVolume = 1000;

                                        string Comment = string.Format("{0}_{1}_{2}_{3}_{4}", i, NewTrades[j, k - 1].Desc, NewTrades[j, k].Desc, NewTrades[j, k + 1].Desc, LastWinRate(Assets[j], TF[k], NewTrades[j, k].TradeDir, TradeLookBack));
                                        PlaceStopOrder(NewTrades[j, k].TradeDir, Assets[j], OrderVolume, NewTrades[j, k].Entry + i * StopLoss * Symbol.PipSize, Label[j, k], StopLoss, null, null, Comment);
                                        Logger(string.Format("Stop Order Placed {0}", Label[j, k]));
                                    }
                                }
                            }
                            else if (NewTrades[j, k].TradeDir == TradeType.Sell)
                            {
                                if (Close < NewTrades[j, k].Entry)
                                {
                                    double OrderVolume = GetOrderVolume(StopLoss, Risk_Max, 1);
                                    if (LastWinRate(Assets[j], TF[k], NewTrades[j, k].TradeDir, TradeLookBack) < 0.6)
                                        OrderVolume = 1000;

                                    string Comment = string.Format("{0}_{1}_{2}_{3}_{4}", 1, NewTrades[j, k - 1].Desc, NewTrades[j, k].Desc, NewTrades[j, k + 1].Desc, LastWinRate(Assets[j], TF[k], NewTrades[j, k].TradeDir, TradeLookBack));
                                    ExecuteMarketOrder(NewTrades[j, k].TradeDir, Assets[j], OrderVolume, Label[j, k], StopLoss, null, Comment);
                                    Print("Mkt Order {0}", Label[j, k]);
                                }
                                else
                                {
                                    for (int i = 2; i < 4; i++)
                                    {
                                        double OrderVolume = GetOrderVolume(StopLoss, Risk_Max, i);
                                        if (LastWinRate(Assets[j], TF[k], NewTrades[j, k].TradeDir, TradeLookBack) < 0.6)
                                            OrderVolume = 1000;

                                        string Comment = string.Format("{0}_{1}_{2}_{3}_{4}", i, NewTrades[j, k - 1].Desc, NewTrades[j, k].Desc, NewTrades[j, k + 1].Desc, LastWinRate(Assets[j], TF[k], NewTrades[j, k].TradeDir, TradeLookBack));
                                        PlaceStopOrder(NewTrades[j, k].TradeDir, Assets[j], OrderVolume, NewTrades[j, k].Entry - i * StopLoss * Symbol.PipSize, Label[j, k], StopLoss, null, null, Comment);
                                        Logger(string.Format("Stop Order Placed {0}", Label[j, k]));
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }

        void CheckRisks()
        {

            for (int j = Assets.GetLowerBound(0) + 1; j < Assets.GetUpperBound(0) - 1; j++)
            {
                for (int k = TF.GetLowerBound(0) + 1; k < TF.GetUpperBound(0) - 1; k++)
                {
                    if (Positions.FindAll(Label[j, k]).Count() > 0)
                    {
                        Print(Positions.FindAll(Label[j, k]).Count());
                        foreach (Position pos in Positions.FindAll(Label[j, k]))
                        {
                            Symbol symbol = Symbols.GetSymbol(Assets[j]);
                            double MaxLoss = 0.0;
                            if (pos.StopLoss.HasValue)
                                MaxLoss = (double)(pos.EntryPrice - pos.StopLoss) * symbol.PipValue * pos.VolumeInUnits / symbol.PipSize;

                            Logger(string.Format("{0} MaxLoss: {1}", Label[j, k], MaxLoss));
                            if (pos.NetProfit > Math.Abs(MaxLoss) && !pos.HasTrailingStop)
                            {
                                pos.ModifyStopLossPrice(pos.EntryPrice);
                                pos.ModifyTrailingStop(true);
                                if (pos.VolumeInUnits > symbol.VolumeInUnitsMin)
                                    pos.ModifyVolume(Symbol.NormalizeVolumeInUnits(0.5 * pos.VolumeInUnits));
                            }

                            //if 2 lower lows, then close trades
                            if (MktData[j, k].LowPrices.Last(0) < MktData[j, k].LowPrices.Last(1))
                            {
                                if (pos.VolumeInUnits == symbol.VolumeInUnitsMin)
                                {
                                    pos.ModifyVolume(Symbol.NormalizeVolumeInUnits(0.5 * pos.VolumeInUnits));
                                }
                                else
                                {
                                    CloseAllPositions(Label[j, k], TradeType.Buy);
                                    CancelAllOrders(Label[j, k], TradeType.Buy);
                                }
                            }

                            if (MktData[j, k].LowPrices.Last(0) < MktData[j, k].LowPrices.Last(1) && MktData[j, k].LowPrices.Last(1) < MktData[j, k].LowPrices.Last(2))
                            {
                                CloseAllPositions(Label[j, k], TradeType.Buy);
                                CancelAllOrders(Label[j, k], TradeType.Buy);
                            }

                            if (MktData[j, k].HighPrices.Last(0) > MktData[j, k].HighPrices.Last(1))
                            {
                                if (pos.VolumeInUnits == symbol.VolumeInUnitsMin)
                                {
                                    pos.ModifyVolume(Symbol.NormalizeVolumeInUnits(0.5 * pos.VolumeInUnits));
                                }
                                else
                                {
                                    CloseAllPositions(Label[j, k], TradeType.Buy);
                                    CancelAllOrders(Label[j, k], TradeType.Buy);
                                }
                            }

                            if (MktData[j, k].HighPrices.Last(0) > MktData[j, k].HighPrices.Last(1) && MktData[j, k].HighPrices.Last(1) > MktData[j, k].HighPrices.Last(2))
                            {
                                CloseAllPositions(Label[j, k], TradeType.Sell);
                                CancelAllOrders(Label[j, k], TradeType.Sell);
                            }
                        }
                    }
                }
            }
        }




        double LastWinRate(string asset, TimeFrame tf, TradeType TradeDir, int TradeLookBack)
        {
            double Wins = 0;
            int count = 0;
            string temp_label = string.Format("{0}_{1}_{2}", "PP", asset, tf);
            foreach (HistoricalTrade trade in History.FindAll(temp_label, asset, TradeDir))
            {
                if (trade.NetProfit > 0)
                {
                    Wins++;
                }
                count++;
                if (count > TradeLookBack)
                    break;
            }
            double FinalWinRate = 100 * Math.Round(Wins / TradeLookBack, 2);
            Logger("WinRate:" + FinalWinRate + " with Lookback: " + TradeLookBack);
            return FinalWinRate;
        }


        //Helper Functions
        public string MapTF(TimeFrame _TF)
        {
            string sTF;
            string _TF_temp = _TF.ToString();
            if (_TF_temp == "Minute")
            {
                sTF = "M1";
            }
            else if (_TF_temp == "Hour")
            {
                sTF = "H1";
            }
            else if (_TF_temp == "Daily")
            {
                sTF = "D1";
            }
            else
            {
                _TF_temp = _TF_temp.Replace("our", "");
                _TF_temp = _TF_temp.Replace("inute", "");
                _TF_temp = _TF_temp.Replace("aily", "");
                _TF_temp = _TF_temp.Replace("eekly", "");
                sTF = _TF_temp;
            }
            return sTF;
        }

        private double EquityAtRisk(double AccountSize, double Px, double SL, double OrderVolume)
        {
            double Equity = (Px - SL) * Symbol.PipValue * OrderVolume;
            return Math.Round(Equity * 100 / AccountSize, 3);
        }

        private double GetOrderVolume(double StopLoss, double Risk, int NoOfTrades)
        {
            double risk_tranche = Risk / NoOfTrades;
            double _OrderVolume = ((Account.Balance * risk_tranche / 100) / StopLoss / Symbol.PipValue);
            double FinalVolume = Math.Max(1000.0, Math.Min(BadVolumeSize, _OrderVolume));
            return Symbol.NormalizeVolumeInUnits(FinalVolume, RoundingMode.ToNearest);
        }
        private IEnumerable<Position> FilterPositions(string Label, TradeType TradeDirection)
        {
            return Positions.Where(p => p.Label == Label && p.SymbolName == Symbol.Name && p.TradeType == TradeDirection);
        }

        private IEnumerable<PendingOrder> FilteredOrders(string Label, TradeType TradeDirection)
        {
            return PendingOrders.Where(o => o.Label == Label && o.SymbolName == Symbol.Name && o.TradeType == TradeDirection);
        }

        private void CancelAllOrders(string Label, TradeType TradeDirection)
        {
            foreach (var order in FilteredOrders(Label, TradeDirection))
                CancelPendingOrder(order);
        }

        private void CloseAllPositions(string Label, TradeType TradeDirection)
        {
            foreach (var position in FilterPositions(Label, TradeDirection))
                ClosePosition(position);
        }
    }

    public class PPTrade
    {
        public string AssetID { get; set; }
        public string Desc { get; set; }
        public TradeType TradeDir { get; set; }
        public double Entry { get; set; }
        public double StopLoss { get; set; }
        public double TakeProfit { get; set; }
        public string AllData { get; set; }
        public string[] OriginalData { get; set; }

        public PPTrade(string[] item)
        {
            //var item = line.Split(',');
            AssetID = item[0] + item[1];
            Desc = string.Format("{0}{1}{2}{3}{4}", item[9], item[7], item[6], item[11], item[10]);
            TradeDir = item[5].Split(':').First() == "BUY" ? TradeType.Buy : TradeType.Sell;
            Entry = double.Parse(item[5].Split(':').Last());
            StopLoss = double.Parse(item[8].Split(':').Last());
            TakeProfit = double.Parse(item[2].Split(' ').Last());
            AllData = string.Concat(AssetID, '-', TradeDir, '-', Entry, '-', Desc);
            OriginalData = item;
        }
    }
}
